{
    "1": {
        "title": "Consumo de API Rest",
        "Description": "Exemplo de dataset que consome API rest Padrão Fluig",
        "Message": "Esse exemplo não tem nenhum parâmetro, então você terá que modificar esse dataset para que ele funcione com a sua API.\nEle possue também uma forma de pegar dados sensíveis de um cadastro para que não deixe nada chumbado, o que é muito recomendado.",
        "CODE": {
            "1": {
                "CodeText": "function createDataset(fields, constraints, sortFields) CHAVESIN\n\t\n\tlog.info(ASPAS<<< WSSPMREST Autorizacao - IniciandoASPAS);\n    \n\tvar filtro = ASPASASPAS;\n\tvar NumeroProcess = ASPASASPAS;\n\tvar basicAuth = ASPASASPAS;\n    var newDataset = DatasetBuilder.newDataset();\n    var clientService = fluigAPI.getAuthorizeClientService();\n    \n    basicAuth = getBasicAuth();\n    \n    if (constraints != null) CHAVESIN\n        if (constraints.length > 0) CHAVESIN\n            for (var i = 0; i < constraints.length; i++) CHAVESIN\n            \tvar name = constraints[i].fieldName.toUpperCase();\n            \tvar value = constraints[i].initialValue;\n            \t\n            \tif(name == ASPASFILTROASPAS)CHAVESIN\n            \t\tfiltro = value.toUpperCase();\n            \tCHAVESOUTelse if(name == ASPASNUMEROPROCESSOASPAS)CHAVESIN\n        \t\t\tNumeroProcess = value + ASPASASPAS;\n        \t\tCHAVESOUT\n            CHAVESOUT\n        CHAVESOUT\n    CHAVESOUT\n    \n    log.info(ASPAS<<< WSSPMREST Autorizacao - Numero do Processo: ASPAS + NumeroProcess);\n    \n    newDataset.addColumn(ASPASNumeroAutorizacaoASPAS);\n    newDataset.addColumn(ASPASNumeroProcessJudicialASPAS);\n    newDataset.addColumn(ASPASLocalExecutanteASPAS);\n    newDataset.addColumn(ASPASTipoLocalExecutanteASPAS);\n    newDataset.addColumn(ASPASPrestadorExecutanteASPAS);\n    newDataset.addColumn(ASPASTipoAutorizacaoASPAS);\n    \t\n    try CHAVESIN\n    \tvar compID = getValue(ASPASWKCompanyASPAS);\n    \t\n        var requestData = CHAVESIN\n        \tcompanyId: compID + '',\n        \tserviceCode: 'WSSPMREST',\n            endpoint: '/Autorizacao/Listar',\n            method: 'POST',                                       \n            timeoutService: '200',\n            headers: CHAVESIN\n            \t\n            \tASPASAuthorizationASPAS: ASPASBasic ASPAS + basicAuth,\n    \t\t    ASPASContent-TypeASPAS: ASPASapplication/jsonASPAS\n            \n    \t\tCHAVESOUT,\n    \t\tparams:CHAVESIN\n    \t\t\tASPASNumeroProcessoASPAS: NumeroProcess\n    \t\tCHAVESOUT\n    \tCHAVESOUT\n        \n        log.info(ASPAS<<< WSSPMREST Autorizacao Request JSON: ASPAS + JSON.stringify(requestData));\n\n        var vo = clientService.invoke(JSON.stringify(requestData));\n        \n        //newDataset.addRow(new Array(vo.getResult(), ASPASASPAS)); // Retorna todos os dados da API para o Dataset\n\n        if (vo.getResult() == null || vo.getResult().isEmpty()) CHAVESIN\n            log.info(ASPAS<<< WSSPMREST Autorizacao - ERRO: Retorno está vazioASPAS);\n        CHAVESOUT else CHAVESIN\n            var response = JSON.parse(vo.getResult());\n            \n            if(response.Dados.Autorizacao != undefined)CHAVESIN\n            \tfor(var i=0;i<response.Dados.Autorizacao.length;i++)CHAVESIN\n            \t\tnewDataset.addRow(new Array(\n        \t\t\t\t//response.Dados.Autorizacao[i].NumeroAutorizacao,\n        \t\t\t\t//response.Dados.Autorizacao[i].NumeroProcessJudicial,\n        \t\t\t\t//response.Dados.Autorizacao[i].LocalExecutante,\n        \t\t\t\t//response.Dados.Autorizacao[i].TipoLocalExecutante,\n        \t\t\t\t//response.Dados.Autorizacao[i].PrestadorExecutante,\n        \t\t\t\t//response.Dados.Autorizacao[i].TipoAutorizacao\n            \t\t));\n            \tCHAVESOUT\n            CHAVESOUT\n        CHAVESOUT\n    CHAVESOUT catch (err) CHAVESIN\n        log.info(ASPAS<<< WSSPMREST Autorizacao - ERRO: ASPAS + err)\n    CHAVESOUT\n  \n    return newDataset;\n\t\nCHAVESOUT\n\nfunction getBasicAuth()CHAVESIN\n\t\n\tvar constraints = new Array();\n\tvar cst = DatasetFactory.createConstraint(ASPASmetadata#activeASPAS, ASPAStrueASPAS, ASPAStrueASPAS, ConstraintType.MUST);\n\t\n\tconstraints.push(cst);\n\t\n\tvar dataset = DatasetFactory.getDataset(ASPAScadastro_parametrosASPAS, null, constraints, null);\n\t\n\tvar basicAuth = dataset.getValue(0,'BasicAuth');\n\t\n\treturn basicAuth;\nCHAVESOUT",
                "Parameters": [],
                "ParameterType": "NO",
                "questions": {}
            }
        }
    }
}